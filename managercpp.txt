#include "Manager.h"


Manager::Manager()
{
	app = new sf::RenderWindow(sf::VideoMode(SCREEN_WIDTH, SCREEN_HEIGHT), "Spacial Robot");
	app->setFramerateLimit(120);

	textureEnemy.loadFromFile("enemy.jpg", sf::IntRect(20,20,60,60));
	spriteEnemy.setTexture(textureEnemy);
	step = 1;

	textureStar.loadFromFile("star.jpg", sf::IntRect(0, 0, 20, 20));
	spriteStar1.setTexture(textureStar);
	spriteStar2.setTexture(textureStar);
	spriteStar3.setTexture(textureStar);

	if (!font.loadFromFile("arial.ttf")) {
		// handle error
	}
}

Manager::~Manager()
{
	delete app;
}

void Manager::Programa()
{
	while (quit == false)
	{
		Inputs();
		Update();
		Render();
	}
}

void Manager::Inputs()
{
	while (app->pollEvent(eventos))
	{
		posicaoMouse = sf::Mouse::getPosition(*app);
		switch (eventos.type)
		{
		case sf::Event::Closed:
			quit = true;
			break;
		case sf::Event::KeyPressed:
			InputTeclado();
			break;
		case sf::Event::MouseButtonPressed:
			MouseClicado();
			break;
		case sf::Event::MouseMoved:
			MouseMovido();
			break;
			if (estadoTela == MENU) {
			case sf::Event::KeyReleased:
				switch (eventos.key.code)		{
				case sf::Keyboard::Up:
					userInput -= 1;
					getpresseditem = userInput;
					break;
				case sf::Keyboard::Down:
					userInput += 1;
					getpresseditem = userInput;
					break;
				case sf::Keyboard::Return:
					switch (Menu)
					{
					case 0:
						switch (getpresseditem) {
						case 0:
							Difficulty();
							Menu += 1;
							break;
						case 1:
							std::cout << "Opissoeins" << std::endl;
							break;
						case 2:
							quit = true;
							break;
						}
						break;
					case 1:
						switch (getpresseditem) {
						case 0:
							Menu += 1;
							estadoTela += 1;
							Easy();
							break;
						case 1:
							Menu += 1;
							estadoTela += 1;
							Normal();
							break;
						case 2:
								Menu += 1;
							estadoTela += 1;
							Hard();
							break;
						case 3:
							Menu += 1;
							estadoTela += 1;
							Extreme();
							break;
						}
					}
				}
			}
		}
	}
}

void Manager::Update()
{
	switch (estadoTela)
	{
	case MENU:
		switch (Menu) {
		case 0:
			UpdateMenu();
			break;
		case 1:
			Difficulty();
			break;
		}
		break;
		
	case JOGO:
		UpdateJogo();
		break;

	case GAMEOVER:
		UpdateGameOver();
		break;
	}
}

void Manager::Render()
{
	app->display();
	switch (estadoTela)
	{
	case MENU:
		switch (Menu){
		case 0:
			RenderMenu();
			break;
		case 1:
			RenderDifficulty();
			break;
		}
		break;

	case JOGO:
		RenderJogo();
		break;

	case GAMEOVER:
		RenderGameOver();
		break;
	}
}

void Manager::UpdateMenu()
{
	if (userInput == 3) userInput = 2;
	if (userInput == -1) userInput = 0;

	menu[0].setFont(font);
	if (userInput == 0)	menu[0].setFillColor(sf::Color::Green);
	else menu[0].setFillColor(sf::Color::White);
	menu[0].setString("Start");
	menu[0].setPosition(sf::Vector2f(SCREEN_WIDTH / 4,SCREEN_HEIGHT/ 4 * 1));

	menu[1].setFont(font);
	if (userInput == 1) menu[1].setFillColor(sf::Color::Green); 
	else  menu[1].setFillColor(sf::Color::White); 
	menu[1].setString("Options");
	menu[1].setPosition(sf::Vector2f(SCREEN_WIDTH / 4, SCREEN_HEIGHT / 4 * 2));

	menu[2].setFont(font);
	if (userInput == 2) menu[2].setFillColor(sf::Color::Green);
	else menu[2].setFillColor(sf::Color::White);
	menu[2].setString("Exit");
	menu[2].setPosition(sf::Vector2f(SCREEN_WIDTH / 4, SCREEN_HEIGHT / 4 * 3));

}

void Manager::Difficulty() {
	if (userInput == 4) userInput = 3;
	if (userInput == -1) userInput = 0;

	Difi[0].setFont(font);
	if (userInput == 0)	Difi[0].setFillColor(sf::Color::Green);
	else Difi[0].setFillColor(sf::Color::White);
	Difi[0].setString("Easy");
	Difi[0].setPosition(sf::Vector2f((SCREEN_WIDTH / 6)* 4, (SCREEN_HEIGHT / 5) * 1));

	Difi[1].setFont(font);
	if (userInput == 1) Difi[1].setFillColor(sf::Color::Green);
	else  Difi[1].setFillColor(sf::Color::White);
	Difi[1].setString("Normal");
	Difi[1].setPosition(sf::Vector2f((SCREEN_WIDTH / 6) * 4, (SCREEN_HEIGHT / 5) * 2));

	Difi[2].setFont(font);
	if (userInput == 2) Difi[2].setFillColor(sf::Color::Green);
	else Difi[2].setFillColor(sf::Color::White);
	Difi[2].setString("Hard");
	Difi[2].setPosition(sf::Vector2f((SCREEN_WIDTH / 6) * 4, (SCREEN_HEIGHT / 5) * 3));

	Difi[3].setFont(font);
	if (userInput == 3) Difi[3].setFillColor(sf::Color::Green);
	else Difi[3].setFillColor(sf::Color::White);
	Difi[3].setString("Extreme");
	Difi[3].setPosition(sf::Vector2f((SCREEN_WIDTH / 6) * 4, (SCREEN_HEIGHT / 5) * 4));
}

void Manager::UpdateJogo()
{
	{
		if (y > 0) {
			if (sf::Keyboard::isKeyPressed(sf::Keyboard::Key(p[0]))) x += 3;
			if (sf::Keyboard::isKeyPressed(sf::Keyboard::Key(p[1]))) x -= 3;
			if (jumps < 1) {
				if (sf::Keyboard::isKeyPressed(sf::Keyboard::Key(p[2]))) {
					dy = -8;
					jumps += 1;
					//(sf::Keyboard::isKeyPressed(sf::Keyboard::Up))
				}
			}

			dy += 0.2;
			y += dy;

			//chÃ£o
			if (y > 550) {
				dy = 0;
				jumps = 0;
			}
			//tela
			if (x > 970)  x -= 3;
			if (x < 0) x += 3;
			//esquerda
			if ((x > 250 - 25) && (x < 250 - 15) && (y > 480 - 35) && (y < 480))	x -= 3;
			if ((x > 650 - 25) && (x < 650 - 15) && (y > 480 - 35) && (y < 480))	x -= 3;
			if ((x > 900 - 25) && (x < 900 - 15) && (y > 350 - 35) && (y < 350))	x -= 3;
			//direita
			if ((x > 250 + 150 - 5) && (x < 250 + 150 + 5) && (y > 480 - 35) && (y < 480))	x += 3;
			if ((x > 650 + 150 - 5) && (x < 650 + 150 + 5) && (y > 480 - 35) && (y < 480))	x += 3;
			if ((x > 900 + 75 - 5) && (x < 900 + 75 + 5) && (y > 350 - 35) && (y < 350))	x += 3;
			//cima
			if ((x > 250 - 15 - 20 / 2) && (x < 250 + 150 - 10) && (y < 480 - 15 - 5) && (y > 480 - 15 - 20) && (dy > 0)) {
				dy = 0;
				jumps = 0;
			}
			if ((x > 650 - 15 - 20 / 2) && (x < 650 + 150 - 10) && (y < 480 - 15 - 5) && (y > 480 - 15 - 20) && (dy > 0)) {
				dy = 0;
				jumps = 0;
			}
			if ((x > 900 - 15 - 10 / 2) && (x < 900 + 75 - 10) && (y < 350 - 15 - 5) && (y > 350 - 15 - 20) && (dy > 0)) {
				dy = 0;
				jumps = 0;
			}
			//baixo
			if ((x > 250 - 15 - 20 / 2) && (x < 250 + 150 - 10) && (y < 480 + 15 + 5) && (y > 480 - 15 - 10) && (dy < 0))	dy += 10;
			if ((x > 650 - 15 - 20 / 2) && (x < 650 + 150 - 10) && (y < 480 + 15 + 5) && (y > 480 - 15 - 10) && (dy < 0))	dy += 10;
			if ((x > 900 - 15 - 10 / 2) && (x < 900 + 75 - 10) && (y < 350 + 15 + 5) && (y > 350 - 15 - 10) && (dy < 0))	dy += 10;
		}
		else {
			dy += 10;
			y += dy;
		}

		enemy_posY += step;

		if (enemy_posY >= 400 || enemy_posY <= 100)
		{
			step *= -1;
		}
		spriteEnemy.setPosition(enemy_posX, enemy_posY);

		if ((x > (enemy_posX - 30)) && (x < (enemy_posX + 60)) &&(y > (enemy_posY - 30)) && (y < (enemy_posY +60))) {
			x = 50, y = 550;
			life -= 1;
		}
		
		if (life == -1) life = 3;

		spriteStar1.setPosition(star_posX, star_posY);
		spriteStar2.setPosition(star_posX + 60, star_posY);
		spriteStar3.setPosition(star_posX + 120, star_posY);
	}
}

void Manager::UpdateGameOver()
{
}

void Manager::RenderMenu()
{
	for (int i = 0; i < Items; i++) {
		app->draw(menu[i]);
	}
}

void Manager::RenderDifficulty()
{
	for (int i = 0; i < choose; i++) {
		app->draw(Difi[i]);
	}
}

void Manager::RenderJogo()
{
	sf::CircleShape circle(15, 4);
	sf::RectangleShape rect1(sf::Vector2f(150, 20));
	sf::RectangleShape rect2(sf::Vector2f(150, 20));
	sf::RectangleShape rect3(sf::Vector2f(75, 10));
	sf::RectangleShape chao(sf::Vector2f(1000, 20));

	circle.setFillColor(sf::Color(255, 0, 0));
	rect1.setFillColor(sf::Color::Yellow);
	rect2.setFillColor(sf::Color::Yellow);
	rect3.setFillColor(sf::Color::Blue);
	chao.setFillColor(sf::Color::Green);

	circle.setPosition(x, y);
	rect1.setPosition(250, 480);
	rect2.setPosition(650, 480);
	rect3.setPosition(900, 350);
	chao.setPosition(0, 580);

	app->clear(sf::Color::Black);
	app->draw(chao);
	app->draw(circle);
	app->draw(rect1);
	app->draw(rect2);
	app->draw(rect3);
	app->draw(spriteEnemy);

	switch (life) {
	case 3 :
		app->draw(spriteStar1);
		app->draw(spriteStar2);
		app->draw(spriteStar3);
		break;
	case 2 :
		app->draw(spriteStar1);
		app->draw(spriteStar2);
		break;
	case 1 :
		app->draw(spriteStar1);
		break;
	}
}

void Manager::RenderGameOver()
{
}

void Manager::InputTeclado()
{
	switch (eventos.key.code)
	{
	case sf::Keyboard::Escape:
		quit = true;
		break;
	case sf::Keyboard::A:
		break;
	}
}

void Manager::MouseClicado()
{
	switch (eventos.mouseButton.button)
	{
	case sf::Mouse::Left: //Mouse Botao Esquerdo Pressionado
		break;

	case sf::Mouse::Right: //Mouse Botao Direito Pressionado
		break;
	}
}

void Manager::MouseMovido()
{
}

void Manager::Easy()
{
	srand(unsigned(time(0)));

	while ((p[0] == p[1]) || (p[0] == p[2]) || (p[1] == p[2])) {
		for (int i = 0; i <= 2; i++) {
			p[i] = (rand() % 8);
			std::cout << "P [" << i << "]" << p[i] << std::endl;
			switch (p[i])
			{
			case 1:
				p[i] = 22;
				break;
			case 2:
				p[i] = 18;
				break;
			case 4:
				p[i] = 71;
				break;
			case 5:
				p[i] = 72;
				break;
			case 6:
				p[i] = 73;
				break;
			case 7:
				p[i] = 74;
				break;
			default:
				break;
			}
		}
	}
	Programa();
}

void Manager::Normal()
{
	srand(unsigned(time(0)));

	while ((p[0] == p[1]) || (p[0] == p[2]) || (p[1] == p[2])) {
		for (int i = 0; i <= 2; i++) {
			p[i] = (rand() % 26);
			std::cout << "P [" << i << "]" << p[i] << std::endl;
		}
	}
	Programa();
}

void Manager::Hard()
{
	srand(unsigned(time(0)));

	while ((p[0] == p[1]) || (p[0] == p[2]) || (p[1] == p[2])) {
		for (int i = 0; i <= 2; i++) {
			p[i] = (rand() % 101);
			std::cout << "P [" << i << "]" << p[i] << std::endl;
		}
	}
	Programa();
}

void Manager::Extreme()
{
	p[0] = 72;
	p[1] = 71;
	p[2] = 73;
	Programa();
}
